
XC8Application2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000017f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084d  00000000  00000000  000001af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024b  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000013aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000c0  000000c0  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.WDT_OFF 00000008  000000b8  000000b8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.WDT_ON  0000000c  000000ac  000000ac  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000002a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.WDT_OFF:

000000b8 <WDT_OFF>:
#define LED_PIN		0


void WDT_OFF(void)
{
	WDTCR = (1<<WDTOE)|(1<<WDE);
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00;
  bc:	11 bc       	out	0x21, r1	; 33
  be:	08 95       	ret

Disassembly of section .text.WDT_ON:

000000ac <WDT_ON>:
}

void WDT_ON(void)
{
	WDTCR = (1 << WDP1)|(1 << WDP1)|(1 << WDE);
  ac:	8a e0       	ldi	r24, 0x0A	; 10
  ae:	81 bd       	out	0x21, r24	; 33
	RESET_BIT(WDTCR, WDP0);
  b0:	81 b5       	in	r24, 0x21	; 33
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	81 bd       	out	0x21, r24	; 33
  b6:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
}

int main(void)
{
	SET_BIT(LED_DDR, LED_PIN);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	81 bb       	out	0x11, r24	; 17
	
	while (1)
	{
		WDT_ON();
  72:	0e 94 56 00 	call	0xac	; 0xac <WDT_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2f e3       	ldi	r18, 0x3F	; 63
  78:	8d e0       	ldi	r24, 0x0D	; 13
  7a:	93 e0       	ldi	r25, 0x03	; 3
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
		
		_delay_ms(1000);
		
		TOG_BIT(LED_PORT, LED_PIN);
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	89 27       	eor	r24, r25
  8e:	82 bb       	out	0x12, r24	; 18
		
		WDT_OFF();
  90:	0e 94 5c 00 	call	0xb8	; 0xb8 <WDT_OFF>
  94:	ee cf       	rjmp	.-36     	; 0x72 <main+0x6>

Disassembly of section .text.__dummy_fini:

000000c8 <_fini>:
  c8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ca <__funcs_on_exit>:
  ca:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000cc <__simulator_exit>:
  cc:	08 95       	ret

Disassembly of section .text.exit:

00000096 <exit>:
  96:	ec 01       	movw	r28, r24
  98:	0e 94 65 00 	call	0xca	; 0xca <__funcs_on_exit>
  9c:	0e 94 64 00 	call	0xc8	; 0xc8 <_fini>
  a0:	ce 01       	movw	r24, r28
  a2:	0e 94 66 00 	call	0xcc	; 0xcc <__simulator_exit>
  a6:	ce 01       	movw	r24, r28
  a8:	0e 94 62 00 	call	0xc4	; 0xc4 <_Exit>

Disassembly of section .text._Exit:

000000c4 <_Exit>:
  c4:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
